---
import copyImage from 'assets/copy.svg';
import tickImage from 'assets/tick.svg';
import getLangIcon from './getLangIcon';
const props = Astro.props;

const lang = props['data-language'];
const langIcon = getLangIcon(lang);
---

<div class="code-block-inner">
  {langIcon && <img src={langIcon} alt={lang} class="lang-icon" width="17" height="17" />}
  <copy-code
    class="copy-code w-[50px] h-[35px] absolute right-0 top-0 bg-bg-code transition-opacity border-solid border-l border-b-[0.5px] border-border-code duration-300"
  >
    <button
      type="button"
      title="Copy"
      type="button"
      class="copy-code-btn flex justify-center items-center w-full h-full transition-opacity hover:opacity-80"
    >
      <img src={copyImage} alt="copy" width="16" height="16" />
    </button>
    <div class="copy-code-success hidden justify-center items-center w-full h-full">
      <img src={tickImage} alt="copy success" width="20" height="20" />
    </div>
  </copy-code>
  <pre><slot /></pre>
</div>

<style is:global>
  /* wrapper */
  div[data-rehype-pretty-code-fragment] {
    position: relative;
    overflow: hidden;
    background-color: theme('colors.bg.code');
    border: 1px solid theme('colors.border.code');
    border-radius: 6px;
  }

  /* code title */
  div[data-rehype-pretty-code-title] {
    display: flex;
    align-items: center;
    height: 35px;
    padding: 0 1.25rem;
    padding-left: 42px;
    font-size: 0.8rem;
    font-weight: 500;
    border-bottom: 0.5px solid theme('colors.border.code');
  }

  /* code title - lang icon */
  .lang-icon {
    position: absolute;
    top: 8px;
    left: 16px;
    display: none;
  }

  div[data-rehype-pretty-code-title] + .code-block-inner > .lang-icon {
    display: block;
  }

  pre {
    font-size: 0.86rem;
    line-height: 1.7;
  }

  pre > code {
    overflow-x: auto;
    display: grid;
    padding: 1rem 0;
  }

  pre > code::selection {
    color: transparent;
    background: transparent;
  }

  /* invert tokens for light mode */
  [data-theme='light'] pre > code > .line > span {
    transform: translate3d(0, 0, 0); /* safari fix */
    backface-visibility: hidden; /* safari fix */
    filter: invert(1);
  }

  [data-theme='light'] pre > code > .line span::selection {
    color: rgb(0 0 0);
    background: rgb(37 160 158);
  }

  /* line number */
  pre > code[data-line-numbers] {
    counter-reset: line;
  }

  pre > code[data-line-numbers] > .line::before {
    content: counter(line);
    counter-increment: line;
    user-select: none;
    display: inline-block;
    width: 1rem;
    margin-right: 1rem;
    color: theme('colors.text.muted' / 22%);
    text-align: right;
  }

  pre > code[data-line-numbers] > .line:only-child::before {
    content: none;
  }

  /* line highlighting */
  pre > code > .line {
    padding: 0 1.25rem;
    border-left: 3px solid transparent;
  }

  pre > code > .line.highlighted::before {
    font-weight: bold;
    color: theme('colors.text.muted');
  }

  pre > code > .line.highlighted {
    background: theme('colors.primary.DEFAULT' / 10%);
    border-left-color: theme('colors.primary.DEFAULT');
  }

  /* word highlighting */
  pre > code > .line .word {
    padding: 0.2rem 0.25rem;
    background: theme('colors.primary.DEFAULT' / 10%);
    border-radius: 0.25rem;
  }

  [data-theme='light'] pre > code > .line .word {
    background: rgb(37 160 158 / 10%);
  }

  /* copy code */
  .copy-code {
    opacity: 0;
  }

  div[data-rehype-pretty-code-title] + .code-block-inner .copy-code {
    opacity: 1;
  }

  @media (hover: hover) and (pointer: fine) {
    .code-block-inner:hover .copy-code {
      opacity: 1;
    }
  }
</style>

<script>
  class CopyCode extends HTMLElement {
    constructor() {
      super();
      const copyCodeBtn = this.querySelector('.copy-code-btn') as HTMLElement;
      const copyCodeSuccess = this.querySelector('.copy-code-success') as HTMLElement;

      copyCodeBtn?.addEventListener('click', () => {
        const contentNode = this.parentNode!.querySelector('code') as HTMLElement;

        navigator.clipboard
          .writeText(contentNode.textContent as string)
          .then(
            () => {
              copyCodeBtn.style.display = 'none';
              copyCodeSuccess.style.display = 'flex';
              setTimeout(() => {
                copyCodeBtn.style.display = 'flex';
                copyCodeSuccess.style.display = 'none';
              }, 1000);
            },
            () => {
              /* clipboard write failed */
            }
          )
          .catch(() => {});
      });
    }
  }

  customElements.define('copy-code', CopyCode);
</script>
