---
import Logo from './svg/Logo.astro';
import NavLink from './NavLink.astro';
import ThemeToggle from './ThemeToggle.astro';

const links = [
  {
    name: 'about',
    path: '/about',
  },
  {
    name: 'blog',
    path: '/blog',
  },
  {
    name: 'notes',
    path: '/notes',
  },
];
---

<>
  <div id="top-of-site-pixel-anchor"></div>
  <header id="nav-container" class="fixed z-10 top-0 left-0 w-full flex justify-center items-center bg-bg-body">
    <nav class="w-full max-w-3xl flex justify-between items-center px-8 sm:px-6">
      <div class="flex items-center">
        <a class="unset pr-5 text-primary" href="/">
          <Logo width="29" height="29" id="logo" data-spin="false" />
          <span class="sr-only">Home</span>
        </a>
      </div>
      <div class="flex items-center">
        <div class="text-text-bold">
          <ul class="unset flex gap-4 [&>li]:p-0">
            {
              links.map(link => (
                <li>
                  <NavLink href={link.path}>{link.name}</NavLink>
                </li>
              ))
            }
          </ul>
        </div>
        <ThemeToggle />
      </div>
    </nav>
  </header>
</>

<script>
  const navContainer = document.querySelector('#nav-container') as HTMLElement;

  let lastScrollY = document.documentElement.scrollTop;
  const scrollHeight = document.documentElement.scrollHeight;
  const clientHeight = document.documentElement.clientHeight;
  window.addEventListener(
    'scroll',
    function () {
      function checkScroll() {
        const st = document.documentElement.scrollTop;
        function checkNavBorder() {
          if (st > 10) {
            navContainer.classList.add('scroll');
          } else {
            navContainer.classList.remove('scroll');
          }
        }
        function checkNavVisibility() {
          if (st > 10 && st > lastScrollY) {
            // downscroll code
            navContainer.classList.add('hide');
          } else if (st < lastScrollY) {
            // upscroll code
            navContainer.classList.remove('hide');
          }
          // check for bouncy scrolling on touch devices
          const isBouncing = st < 0 || st + clientHeight > scrollHeight;
          if (!isBouncing) lastScrollY = st;
        }
        checkNavBorder();
        checkNavVisibility();
      }

      checkScroll();
      window.requestAnimationFrame(checkScroll);
    },
    { capture: true, passive: true }
  );

  let isSpinning = true;
  const logo = document.querySelector('#logo') as HTMLElement;
  new IntersectionObserver(entry => {
    if (entry[0].boundingClientRect.y < 0) {
      logo.dataset.spin = 'false';
    } else {
      if (!isSpinning) logo.dataset.spin = 'true';
      isSpinning = false;
    }
  }).observe(document.querySelector('#top-of-site-pixel-anchor') as HTMLElement);
</script>

<style>
  #top-of-site-pixel-anchor {
    position: absolute;
    top: theme('height.navbar');
    left: 0;
    width: 1px;
    height: 1px;
  }

  header {
    height: theme('height.navbar');
    border: 0;
    border-color: transparent;
    border-style: solid;
    border-bottom-width: 1px;
    transition: height 0.3s ease, border-color 0.3s ease, transform 0.3s ease-in-out;

    &.scroll {
      border-color: theme('colors.bg.border');

      @media (min-width: theme('screens.md.max')) {
        height: calc(theme('height.navbar') - 0.8rem);
      }
    }

    &.hide {
      transform: translateY(-100%);
    }

    @media (max-width: theme('screens.md.max')) {
      height: calc(theme('height.navbar') - 0.8rem);
    }
  }

  #logo[data-spin='true'] {
    animation: spin 0.9s forwards;
  }

  @keyframes spin {
    to {
      transform: rotate(2turn);
    }
  }
</style>
