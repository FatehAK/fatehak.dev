---
---

<theme-toggle>
  <button
    class="bg-text-heading/10 ml-4 inline-flex h-6 w-11 items-center rounded-full"
    id="theme-toggle"
    role="switch"
    type="button"
    tabindex="0"
    aria-checked="false"
  >
    <span class="sr-only">Toggle theme</span>
    <span
      id="theme-toggle-circle"
      class="light-icon icon inline-block h-4 w-4 rounded-full bg-gradient-to-tr invisible"
    >
      <span class="absolute top-0 right-0 w-[10px] h-[10px] rounded-full bg-gray-700 scale-[0]"></span>
    </span>
  </button>
</theme-toggle>

<script>
  function updateTheme(mode) {
    const themeColorMeta = document.head.querySelector('meta[name="theme-color"]');
    document.documentElement.setAttribute('data-theme', mode);
    sessionStorage.setItem('theme', mode);
    if (mode === 'dark') {
      // @ts-ignore
      themeColorMeta.content = '#101822';
    } else {
      // @ts-ignore
      themeColorMeta.content = '#fff';
    }
  }

  class ThemeToggle extends HTMLElement {
    constructor() {
      super();
      let currentMode = document.documentElement.getAttribute('data-theme');
      const toggle = this.querySelector('button');
      const iconElem = toggle?.querySelector('#theme-toggle-circle');

      if (iconElem) {
        // set the toggle mode based on the html classname
        if (currentMode === 'dark') {
          iconElem.classList.remove('light-icon');
          iconElem.classList.add('dark-icon');
        }

        // we load the toggle invisible to prevent flash
        // remove visibility class after setting initial dark/light class
        iconElem.classList.remove('invisible');

        toggle?.addEventListener('click', () => {
          if (currentMode === 'dark') {
            iconElem.classList.remove('dark-icon');
            iconElem.classList.add('light-icon');
            updateTheme('light');
            currentMode = 'light';
          } else {
            iconElem.classList.remove('light-icon');
            iconElem.classList.add('dark-icon');
            updateTheme('dark');
            currentMode = 'dark';
          }

          // prevent slide animation on page load for dark mode
          if (!iconElem.classList.contains('duration-300')) {
            iconElem.classList.add('duration-300');
          }
        });
      }
    }
  }

  customElements.define('theme-toggle', ThemeToggle);
</script>

<style>
  .icon {
    background-image: linear-gradient(to bottom, theme('colors.primary.DEFAULT'), theme('colors.primary.dark'));
  }

  .light-icon {
    transform: translateX(0.25rem);
  }

  .dark-icon {
    transform: translateX(1.5rem);
  }
</style>
