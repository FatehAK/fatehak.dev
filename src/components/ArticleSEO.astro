---
import { APP_CONFIG } from 'appConfig';

const { title, description, date, lastMod, tags = [], readingTime, banner = '/banners/default.png' } = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site).toString();
const bannerURL = new URL(banner, Astro.site).toString();

const META_TAGS = [
  { name: 'title', content: title },
  { name: 'description', content: description },
  { name: 'image', content: bannerURL },
  // Open Graph tags
  { property: 'og:title', content: title },
  { property: 'og:description', content: description },
  { property: 'og:type', content: 'article' },
  { property: 'og:url', content: Astro.url },
  { property: 'og:image', content: bannerURL },
  { property: 'og:image:alt', content: APP_CONFIG.META.appName },
  { property: 'og:image:width', content: 1280 },
  { property: 'og:image:height', content: 720 },
  // Twitter tags
  { name: 'twitter:title', content: title },
  { name: 'twitter:description', content: description },
  { name: 'twitter:url', content: Astro.url },
  { name: 'twitter:image', content: bannerURL },
  { name: 'twitter:image:alt', content: APP_CONFIG.META.appName },
  { name: 'twitter:label1', content: 'Written by' },
  { name: 'twitter:data1', content: APP_CONFIG.USER.name },
  { name: 'twitter:label2', content: 'Est. reading time' },
  { name: 'twitter:data2', content: readingTime },
  // article specific
  { property: 'article:author', content: APP_CONFIG.USER.name },
  { property: 'article:published_time', content: date.toISOString() },
  { property: 'article:section', content: 'Programming' },
  ...tags.map(tag => ({ property: 'article:tag', content: tag })),
];

if (lastMod) META_TAGS.push({ property: 'article:modified_time', content: lastMod.toISOString() });
---

<title>{title} - {APP_CONFIG.USER.name}</title>
<link rel="canonical" href={canonicalURL} />
{META_TAGS.map(({ content, ...rest }) => <meta {...rest} content={content} />)}
