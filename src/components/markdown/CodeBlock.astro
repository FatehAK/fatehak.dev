---
import copyImage from 'assets/copy.svg?url';
import tickImage from 'assets/tick.svg?url';
import htmlIcon from 'assets/icons/html.svg?url';
import cssIcon from 'assets/icons/css.svg?url';
import jsIcon from 'assets/icons/js.svg?url';
import tsIcon from 'assets/icons/ts.svg?url';
import jsonIcon from 'assets/icons/json.svg?url';
import jsxIcon from 'assets/icons/jsx.svg?url';
import shellIcon from 'assets/icons/shell.svg?url';

const iconMap = {
  js: jsIcon,
  html: htmlIcon,
  css: cssIcon,
  ts: tsIcon,
  json: jsonIcon,
  jsx: jsxIcon,
  tsx: tsIcon,
  shell: shellIcon,
  bash: shellIcon,
  console: shellIcon,
};

const props = Astro.props;

const lang = props['data-language'];
const langIcon = iconMap[lang];
---

<div class="code-block-inner">
  {langIcon && <img src={langIcon} alt={lang} class="lang-icon" width="17" height="17" />}
  <copy-code
    class="copy-code w-[50px] h-[40px] absolute right-0 top-0 bg-bg-code transition-opacity border-solid border-l border-b-[0.5px] border-border-code duration-300"
  >
    <button
      type="button"
      title="Copy"
      type="button"
      class="copy-code-btn flex justify-center items-center w-full h-full transition-opacity hover:opacity-80"
    >
      <img src={copyImage} alt="copy" width="17" height="17" class="select-none" />
    </button>
    <div class="copy-code-success hidden justify-center items-center w-full h-full">
      <img src={tickImage} alt="copy success" width="20" height="20" />
    </div>
  </copy-code>
  <pre><slot /></pre>
</div>

<style>
  /* wrapper */
  :global(div[data-rehype-pretty-code-fragment]) {
    /* one off colors */
    --white: #d1d5db;
    --cyan: #22d3ee;

    position: relative;
    overflow: hidden;
    background-color: theme('colors.bg.code');
    border-radius: 6px;

    @apply break-padding;
  }

  /* code title - lang icon */
  .lang-icon {
    user-select: none;
    position: absolute;
    top: 4px;
    right: 6px;
  }

  /* code title */
  :global(div[data-rehype-pretty-code-title]) {
    display: flex;
    align-items: center;
    height: 2.5rem;
    padding: 0 1.25rem;
    padding-left: 2.625rem;
    font-size: 0.82rem;
    font-weight: 500;
    color: var(--white);
    border-bottom: 0.5px solid theme('colors.border.code');

    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;

    & + .code-block-inner > .lang-icon {
      top: 11px;
      left: 16px;
    }
  }

  .code-block-inner > pre > :global(code) {
    overflow: auto;
    display: grid;
    max-height: 80rem;
    padding: 1.1rem 0;
    font-family: theme('fontFamily.mono');
    font-weight: 400;
    line-height: 1.7;
    background-color: inherit;
    border: 0;
    border-radius: 0;

    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;

    &::before {
      content: '';
    }

    &::after {
      content: '';
    }

    & > :global(.line) {
      padding: 0 1rem;
      border-left: 3px solid transparent;
    }

    /* line highlighting */
    & > :global(.line.highlighted) {
      background: theme('colors.bg.code-highlight' / 12%);
      border-left-color: var(--cyan);
    }

    /* line number */
    &[data-line-numbers] {
      counter-reset: line;

      & > :global(.line)::before {
        content: counter(line);
        counter-increment: line;
        user-select: none;
        display: inline-block;
        width: 1rem;
        margin-right: 1rem;
        color: theme('colors.bg.code-highlight' / 22%);
        text-align: right;
      }

      & > :global(.line):only-child::before {
        content: none;
      }
    }

    /* word highlighting */
    & > :global(.line .word) {
      padding: 0.2rem 0.25rem;
      background: theme('colors.bg.code-highlight' / 12%);
      border-radius: 0.25rem;
    }

    @media (max-width: theme('screens.md.max')) {
      max-height: unset;
    }
  }

  /* copy code */
  .copy-code {
    opacity: 0;
    background-color: theme('colors.border.code');
    border-top-right-radius: 6px;
  }

  :global(div[data-rehype-pretty-code-title]) + .code-block-inner .copy-code {
    opacity: 1;
    background-color: theme('colors.bg.code');
  }

  @media (hover: hover) and (pointer: fine) {
    .code-block-inner:hover .copy-code {
      opacity: 1;
      background-color: theme('colors.border.code');
    }
  }
</style>

<script>
  class CopyCode extends HTMLElement {
    constructor() {
      super();
    }

    connectedCallback() {
      const copyCodeBtn = this.querySelector('.copy-code-btn') as HTMLElement;
      const copyCodeSuccess = this.querySelector('.copy-code-success') as HTMLElement;

      copyCodeBtn?.addEventListener('click', () => {
        const contentNode = this.parentNode!.querySelector('code') as HTMLElement;
        navigator.clipboard
          .writeText(contentNode.textContent as string)
          .then(
            () => {
              copyCodeBtn.style.display = 'none';
              copyCodeSuccess.style.display = 'flex';
              setTimeout(() => {
                copyCodeBtn.style.display = 'flex';
                copyCodeSuccess.style.display = 'none';
              }, 1000);
            },
            () => {
              /* clipboard write failed */
            }
          )
          .catch(() => {});
      });
    }
  }

  customElements.define('copy-code', CopyCode);
</script>
