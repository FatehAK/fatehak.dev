---
const { headings: inputHeadings } = Astro.props;

// only `h2` headings are considered for toc generation
const headings = inputHeadings.filter(h => h.depth === 2 && h.slug !== 'footnote-label');

if (headings.length <= 1) return undefined;
---

{
  (
    <nav class="toc-wrapper lg:hidden">
      <div class="text-[0.94rem] font-[600] text-text-heading">On this page</div>
      <toc-scroll-spy>
        <ul class="toc-list mt-2">
          {headings.map(h => {
            return (
              <li class="toc-list-item">
                <a class="unset toc-anchor" href={`#${h.slug}`}>
                  {h.text}
                </a>
              </li>
            );
          })}
        </ul>
      </toc-scroll-spy>
    </nav>
  )
}

<style>
  .toc-wrapper {
    position: fixed;
    top: 17rem;
    left: 4rem;
    overflow: auto;
    overscroll-behavior: contain;
    max-width: 18rem;
    max-height: 50vh;
    opacity: 0;
    animation: fadein 0.4s ease forwards;
  }

  .toc-list {
    padding-right: 1rem;
    font-size: 0.9rem;
    list-style: none;
  }

  .toc-list li {
    padding: 0.2rem 0;
    font-weight: 500;
  }

  .toc-anchor {
    opacity: 0.4;
    transition: opacity 0.2s;

    & :global(a) {
      display: none;
    }

    & :global(code) {
      font-weight: bold;
      color: inherit !important;
      filter: none !important;

      & :global(span) {
        color: inherit !important;
      }
    }

    &.scroll-spy-active {
      color: theme('colors.primary.DEFAULT');
      opacity: 1;
    }

    @media (hover: hover) and (pointer: fine) {
      &:not(.scroll-spy-active):hover {
        opacity: 0.9;
      }
    }
  }
</style>

<script>
  // ensure h2 children are injected into our toc anchor
  const headings = document.querySelectorAll('.prose h2');
  headings?.forEach(head => {
    const anchor = document.querySelector(`.toc-anchor[href="#${head.getAttribute('id')}"]`) as HTMLElement;
    if (anchor) anchor.innerHTML = head.innerHTML;
  });

  /* global NodeListOf */
  class TocScrollSpy extends HTMLElement {
    tocActiveClass: string;
    observer: IntersectionObserver;
    activeAnchorHref: string;

    constructor() {
      super();
      this.scrollSpy = this.scrollSpy.bind(this);
      this.tocActiveClass = 'scroll-spy-active';
    }

    connectedCallback() {
      const initObserver = shouldConnect => {
        if (shouldConnect) {
          const articleContent = document.querySelector('article') as HTMLElement;
          const sections = articleContent?.querySelectorAll('section[data-heading-rank="2"]') as NodeListOf<Element>;
          this.observer = new IntersectionObserver(this.scrollSpy, {
            rootMargin: '-5% 0px -90% 0px',
          });
          sections?.forEach(e => this.observer.observe(e));
        } else {
          this.observer?.disconnect();
        }
      };

      // only connect the observer on viewports larger than 1366px
      const mql = window.matchMedia('(min-width: 1366px)');
      initObserver(mql.matches);

      mql.addEventListener('change', e => {
        initObserver(e.matches);
      });
    }

    disconnectedCallback() {
      this.observer?.disconnect();
    }

    scrollSpy(entries) {
      const indexOfElementIntersecting = entries.findIndex(entry => entry.intersectionRatio > 0);

      const headingAnchors = new Map(
        [...this.querySelectorAll('.toc-anchor')].map(anchor => [anchor.getAttribute('href'), anchor])
      );

      if (indexOfElementIntersecting > -1) {
        const intersectionSection = entries[indexOfElementIntersecting].target;
        this.activeAnchorHref = `#${intersectionSection.getAttribute('aria-labelledby')}`;
        headingAnchors.get(this.activeAnchorHref)!.classList.add(this.tocActiveClass);
      }

      if (this.activeAnchorHref) {
        // remove active class if present on other anchors
        headingAnchors.forEach(anchor => {
          if (anchor.getAttribute('href') !== this.activeAnchorHref) {
            anchor.classList.remove(this.tocActiveClass);
          }
        });
      }
    }
  }
  customElements.define('toc-scroll-spy', TocScrollSpy);
</script>
