---
import { getImage } from '@astrojs/image';

// in order of smallest to largest
const widths = [576, 768, 1400];

const { alt, src } = Astro.props;

// in order of latest to oldest
const formats = src.format === 'gif' ? ['gif'] : ['webp', 'png'];

const sources: any = [];
let fallback = {};

for (const format of formats) {
  let srcset = '';
  for (let i = 0; i < widths.length; i++) {
    const attrs: any = await getImage({
      src,
      alt,
      // @ts-ignore
      format,
      width: widths[i],
      quality: 100,
    });
    const isLast = i === widths.length - 1;
    // we assign the last image with the largest dimension as the fallback
    if (isLast && (format === 'png' || format === 'gif')) {
      fallback = {
        width: attrs.width,
        height: attrs.height,
        src: attrs.src,
      };
    }
    srcset += `${decodeURI(attrs.src)} ${widths[i]}w${isLast ? '' : ', '}`;
  }
  sources.push({ srcset, type: `image/${format}` });
}

const children = await Astro.slots.render('default');
---

<figure class="break-padding">
  <picture>
    {sources.map(attrs => <source {...attrs} sizes="(max-width: 700px) calc(100vw - 0.6rem), calc(48rem - 2rem)" />)}
    <img class="rounded-[6px]" {...fallback} alt={alt} loading="lazy" decoding="async" />
  </picture>
  {children && <figcaption class="pt-2 text-center text-sm leading-[1.5] text-text-body/70" set:html={children} />}
</figure>
