---
const { href, class: className, ...props } = Astro.props;
const path = Astro.url.pathname.replace(/\/$/, '');

const isHome = href === '/' && path === '';
const isOtherPages = typeof href === 'string' && href.length > 1 ? path.substring(1).startsWith(href.substring(1)) : false;
const isActive = isHome || isOtherPages;
---

<a href={href} class:list={[className, { show: isActive }, 'unset nav-link']} {...props}><slot /></a>

<style>
  .nav-link {
    position: relative;
    text-decoration: none;
  }

  .nav-link::after {
    content: '';
    position: absolute;
    right: 0;
    bottom: -9px;
    left: 0;
    transform-origin: left center;
    transform: translateZ(0) scaleX(0);
    height: 3px;
    background-color: theme('colors.text.link');
    transition: all 0.15s ease-in-out;
  }

  .nav-link.show::after {
    transform: translateZ(0) scale(1);
  }

  @media (hover: hover) and (pointer: fine) {
    .nav-link:hover::after {
      transform: translateZ(0) scale(1);
    }
  }
</style>
